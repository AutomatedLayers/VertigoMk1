# ███╗   ███╗ █████╗  ██████╗██████╗  ██████╗     ██╗   ██╗ █████╗ ██████╗ ██╗ █████╗ ██████╗ ██╗     ███████╗███████╗
# ████╗ ████║██╔══██╗██╔════╝██╔══██╗██╔═══██╗    ██║   ██║██╔══██╗██╔══██╗██║██╔══██╗██╔══██╗██║     ██╔════╝██╔════╝
# ██╔████╔██║███████║██║     ██████╔╝██║   ██║    ██║   ██║███████║██████╔╝██║███████║██████╔╝██║     █████╗  ███████╗
# ██║╚██╔╝██║██╔══██║██║     ██╔══██╗██║   ██║    ╚██╗ ██╔╝██╔══██║██╔══██╗██║██╔══██║██╔══██╗██║     ██╔══╝  ╚════██║
# ██║ ╚═╝ ██║██║  ██║╚██████╗██║  ██║╚██████╔╝     ╚████╔╝ ██║  ██║██║  ██║██║██║  ██║██████╔╝███████╗███████╗███████║
# ╚═╝     ╚═╝╚═╝  ╚═╝ ╚═════╝╚═╝  ╚═╝ ╚═════╝       ╚═══╝  ╚═╝  ╚═╝╚═╝  ╚═╝╚═╝╚═╝  ╚═╝╚═════╝ ╚══════╝╚══════╝╚══════╝

[gcode_macro _macro_variables]
# Ready position (absolute)
variable_ready_pos_x: 227.5
variable_ready_pos_y: 55
variable_ready_pos_z_offset_from_max: 30
variable_ready_pos_z_offset_front: 26
variable_ready_pos_z_offset_rear: 13

# Speeds (mm/sec)
variable_speed_xy: 200
variable_speed_z: 25
variable_fast_acc: 12000
variable_slow_acc: 2000

# Default temperatures (C)
variable_default_temp_extruder: 250
variable_default_temp_bed: 60
variable_print_temp: 0

# Probe Settings
variable_probe_dock_pos_x: 232
variable_probe_dock_pos_y: 5
variable_probe_dock_entry_relative_x: 0 
variable_probe_dock_entry_relative_y: 44 
variable_probe_dock_exit_relative_x: -20.5
variable_probe_dock_exit_relative_y: 0
variable_probe_dock_bed_clearance_z:40
variable_probe_dock_speed_pctg: 50
variable_probe_cal_pos_x: 210
variable_probe_cal_pos_y: 60
variable_probe_cal_z_initial: 20

# # Probe Nozzle Offset
# variable_probe_block_a_x: 170.5
# variable_probe_block_a_y: 8.5
# variable_probe_block_b_x: 185
# variable_probe_block_b_y: 3.5
# variable_probe_block_c_x: 200
# variable_probe_block_c_y: 0
# variable_probe_nozzle_deflection_error: 0.0  #To determine value, 1) Perform Nozzle Offset & Save  2) Perform Z-Tilt  3) Move nozzle to center of bed  4) touch nozzle to bed and look at reading  5) New Error Value = Old Error Value + Z-Readout

# Nozzle Prime Settings
variable_prime_pos_x: 8
variable_prime_pos_y: 75
variable_prime_pos_z: 0.1
variable_prime_layer_z_height: 0.3

# filament offset container
variable_filament_specific_offset: 0.0 # DO NOT CHANGE

# Bed Scrape Settings
variable_scrape_pos_safe_x: 35
variable_scrape_pos_safe_y: 3
variable_scrape_speed_z: 25 # mm/s
variable_scrape_speed_rotate_pctg: 100
variable_scrape_speed_corner_pctg: 50
variable_scrape_cool_pos: 72
variable_scrape_pos_corner: 68
variable_scrape_corner_distance: 12
variable_scrape_max_temp_threshold_default: 35
variable_scrape_timeout: 10 # minutes
# variable_scrape_retries: 1 TO BE IMPLEMENTED

# Filament Cutter Settings
variable_cut_pos_x: 253
variable_cut_pos_y: 52
variable_cut_attach_y_dist: 22
variable_cut_dx: 22
variable_cut_dy: 23

# Purge/Wipe/Plug Settings
variable_plug_pos_x: 22
variable_plug_pos_y: 5
variable_purge_pos_x: 0
variable_purge_pos_y: 5
variable_wipe_dist: 17
variable_wipe_speed: 50
variable_purge_dist: 70
variable_purge_speed: 5
variable_wipe_plug_dx: 12.1
variable_purge_pos_x: 0
variable_purge_pos_y: 5

# MMU Settings
variable_mmu_enabled: True

# Timelapse Settings
variable_timelapse_on_scrape_enabled: False

# State Flags
variable_state_ready_bed: False
variable_state_ready_for_scrape: False
variable_state_homing_to_bottom: False
variable_state_probe_is_attached: False
variable_state_bed_is_level: False


gcode:
    {% set macro_vars = printer["gcode_macro _macro_variables"] %}
    {% set out = [] %}
    {% for param, value in macro_vars.items() %}
      {% set dummy = out.append("| %s: %s" % (param, value)) %}
    {% endfor %}
    {action_respond_info("Macro Variables:\n" + out|join("\n"))}
    # DO NOT CHANGE BELOW
    # Convert mm/s to mm/min
    SET_GCODE_VARIABLE MACRO=_macro_variables VARIABLE=speed_xy VALUE={(macro_vars.speed_xy*60)}
    SET_GCODE_VARIABLE MACRO=_macro_variables VARIABLE=speed_z VALUE={(macro_vars.speed_z*60)}
    SET_GCODE_VARIABLE MACRO=_macro_variables VARIABLE=scrape_speed_z VALUE={(macro_vars.scrape_speed_z*60)}
    SET_GCODE_VARIABLE MACRO=_macro_variables VARIABLE=wipe_speed VALUE={(macro_vars.wipe_speed*60)}
    SET_GCODE_VARIABLE MACRO=_macro_variables VARIABLE=purge_speed VALUE={(macro_vars.purge_speed*60)}
    SET_GCODE_VARIABLE MACRO=_CLIENT_VARIABLE VARIABLE=custom_park_y VALUE={macro_vars.plug_pos_y}
    SET_GCODE_VARIABLE MACRO=_CLIENT_VARIABLE VARIABLE=park_at_cancel_y VALUE={macro_vars.plug_pos_y}
    # SET_GCODE_VARIABLE MACRO=_CLIENT_VARIABLE VARIABLE=custom_park_x VALUE={macro_vars.plug_pos_x}
    # SET_GCODE_VARIABLE MACRO=_CLIENT_VARIABLE VARIABLE=park_at_cancel_x VALUE={macro_vars.plug_pos_x}

## FOR MAINSAIL PAUSE/RESUME/CANCEL ##
[gcode_macro _CLIENT_VARIABLE]
variable_use_custom_pos   : True ; use custom park coordinates for x,y [True/False]
variable_custom_park_x    : 0.0   ; custom x position; value must be within your defined min and max of X
variable_custom_park_y    : 0.0   ; custom y position; value must be within your defined min and max of Y
variable_custom_park_dz   : 2.0   ; custom dz value; the value in mm to lift the nozzle when move to park position
variable_retract          : 2.0   ; the value to retract while PAUSE
variable_cancel_retract   : 5.0   ; the value to retract while CANCEL_PRINT
variable_speed_retract    : 80.0  ; retract speed in mm/s
variable_unretract        : 2.0   ; the value to unretract while RESUME
variable_speed_unretract  : 30.0  ; unretract speed in mm/s
variable_speed_hop        : 15.0  ; z move speed in mm/s
variable_speed_move       : 100.0 ; move speed in mm/s
variable_park_at_cancel   : True ; allow to move the toolhead to park while execute CANCEL_PRINT [True/False]
variable_park_at_cancel_x : 0  ; different park position during CANCEL_PRINT [None/Position as Float]; park_at_cancel must be True
variable_park_at_cancel_y : 0  ; different park position during CANCEL_PRINT [None/Position as Float]; park_at_cancel must be True
# !!! Caution [firmware_retraction] must be defined in the printer.cfg if you set use_fw_retract: True !!!
variable_use_fw_retract   : False ; use fw_retraction instead of the manual version [True/False]
variable_idle_timeout     : 0     ; time in sec until idle_timeout kicks in. Value 0 means that no value will be set or restored
variable_runout_sensor    : ""    ; If a sensor is defined, it will be used to cancel the execution of RESUME in case no filament is detected.
#                                   Specify the config name of the runout sensor e.g "filament_switch_sensor runout". Hint use the same as in your printer.cfg
# !!! Custom macros, please use with care and review the section of the corresponding macro.
# These macros are for simple operations like setting a status LED. Please make sure your macro does not interfere with the basic macro functions.
# Only  single line commands are supported, please create a macro if you need more than one command.
variable_user_pause_macro : ""    ; Everything inside the "" will be executed after the klipper base pause (PAUSE_BASE) function
variable_user_resume_macro: "WIPE_NOZZLE"    ; Everything inside the "" will be executed before the klipper base resume (RESUME_BASE) function
variable_user_cancel_macro: "WIPE_PLUG"    ; Everything inside the "" will be executed before the klipper base cancel (CANCEL_PRINT_BASE) function
gcode:


[gcode_macro DO_BACKUP]
gcode:
    {% set message = params.MESSAGE|default()|string %}
    {% if message %}
        RUN_SHELL_COMMAND CMD=update_git_script_message PARAMS="'{params.MESSAGE}'"
    {% else %}
        RUN_SHELL_COMMAND CMD=update_git_script
    {% endif %}

[gcode_shell_command update_git_script]
command: bash -c "bash $HOME/klipper-backup/script.sh"
timeout: 90.0
verbose: True

[gcode_shell_command update_git_script_message]
command: bash -c "bash $HOME/klipper-backup/script.sh $0"
timeout: 90.0
verbose: True


[gcode_macro DUMP_VARIABLES]
gcode:
    {% set filter_name = params.NAME|default('')|string|lower %}
    {% set filter_value = params.VALUE|default('')|string|lower %}
    {% set show_cfg = params.SHOW_CFG|default(0)|int %}
    
    {% set out = [] %}

    {% for key1 in printer %}
        {% for key2 in printer[key1] %}
            {% if (show_cfg or not (key1|lower == 'configfile' and key2|lower in ['config', 'settings'])) and (filter_name in key1|lower or filter_name in key2|lower) and filter_value in printer[key1][key2]|string|lower %}
                {% set dummy = out.append("printer['%s'].%s = %s" % (key1, key2, printer[key1][key2])) %}
            {% endif %}
        {% else %}
            {% if filter_name in key1|lower and filter_value in printer[key1]|string|lower %}
                {% set dummy = out.append("printer['%s'] = %s" % (key1, printer[key1])) %}
            {% endif %}
        {% endfor %}
    {% endfor %}
    
    {action_respond_info(out|join("\n"))}


[gcode_macro M84]
rename_existing: M84.1
gcode:
    RESPOND MSG="Homing Z for motor disable"
    SET_GCODE_VARIABLE MACRO=_macro_variables VARIABLE=state_ready_bed VALUE=False
    _DISABLE_Z_FRONT
    _DISABLE_Z_REAR
    M84.1
    # SET_GCODE_VARIABLE MACRO=_macro_variables VARIABLE=state_homing_to_bottom VALUE=False

    
[gcode_macro _DISABLE_Z_FRONT]
gcode:
    SET_PIN PIN="z0_en" VALUE=1
    SET_PIN PIN="z1_en" VALUE=1
    RESPOND MSG="Front Z disabled" 


[gcode_macro _DISABLE_Z_REAR]
gcode:
    SET_PIN PIN="z2_en" VALUE=1
    SET_PIN PIN="z3_en" VALUE=1    
    RESPOND MSG="Rear Z disabled" 


[gcode_macro ENABLE_Z_ALL]
gcode:
    SET_PIN PIN="z0_en" VALUE=0
    SET_PIN PIN="z1_en" VALUE=0  
    SET_PIN PIN="z2_en" VALUE=0
    SET_PIN PIN="z3_en" VALUE=0  
    RESPOND MSG="All Z enabled"


[gcode_macro READY_BED]
gcode:
    {% set macro_vars = printer["gcode_macro _macro_variables"] %}
    {% set zmax = printer.toolhead.axis_maximum.z %}

    RESPOND MSG="Readying the bed"
    ENABLE_Z_ALL
    SET_GCODE_VARIABLE MACRO=_macro_variables VARIABLE=state_homing_to_bottom VALUE=True
    G28 Z 
    _DISABLE_Z_REAR
    G91
    G1 Z-{macro_vars.ready_pos_z_offset_front} F{macro_vars.speed_z}
    ENABLE_Z_ALL
    _DISABLE_Z_FRONT
    G1 Z-{macro_vars.ready_pos_z_offset_rear} F{macro_vars.speed_z}
    ENABLE_Z_ALL

    SET_GCODE_VARIABLE MACRO=_macro_variables VARIABLE=state_homing_to_bottom VALUE=False
    SET_GCODE_VARIABLE MACRO=_macro_variables VARIABLE=state_ready_for_scrape VALUE=False    
    SET_GCODE_VARIABLE MACRO=_macro_variables VARIABLE=state_ready_bed VALUE=True
    RESPOND MSG="Bed is ready to move"


[gcode_macro READY_TOOLHEAD]
gcode:
    {% set macro_vars = printer["gcode_macro _macro_variables"] %}
    
    {% if 'y' not in printer.toolhead.homed_axes %}
      G28 Y
    {% endif %}
    {% if 'x' not in printer.toolhead.homed_axes %}
      G28 X    
    {% endif %}
    G90
    G1 X{macro_vars.ready_pos_x} Y{macro_vars.ready_pos_y} F{macro_vars.speed_xy}
    

[gcode_macro _READY_FOR_SCRAPE]
gcode:
    {% set macro_vars = printer["gcode_macro _macro_variables"] %}
    {% set ymin = printer.toolhead.axis_minimum.y %}
    {% set zmax = printer.toolhead.axis_maximum.z %}
    {% set xcenter = (printer.toolhead.axis_maximum.x - printer.toolhead.axis_minimum.x)/2 %}
    RESPOND MSG="Positioning for bed scraping"
    SET_FAN_SPEED FAN=bed_cooling SPEED=1
    SET_GCODE_VARIABLE MACRO=_macro_variables VARIABLE=state_homing_to_bottom VALUE=True
    G28 Z 
    G90
    {% if 'y' not in printer.toolhead.homed_axes %}
      G28 Y
    {% endif %}
    {% if 'x' not in printer.toolhead.homed_axes %}
      G28 X
    {% endif %}    
    G90
    {% if printer.toolhead.position.x != macro_vars.plug_pos_x or printer.toolhead.position.y != macro_vars.plug_pos_y %}
      G1 X{macro_vars.scrape_pos_safe_x} Y{macro_vars.scrape_pos_safe_y} F{macro_vars.speed_xy}    
    {% endif %}
    
    SET_GCODE_VARIABLE MACRO=_macro_variables VARIABLE=state_homing_to_bottom VALUE=False
    SET_GCODE_VARIABLE MACRO=_macro_variables VARIABLE=state_ready_for_scrape VALUE=True
    SET_GCODE_VARIABLE MACRO=_macro_variables VARIABLE=state_ready_bed VALUE=False
    RESPOND MSG="Ready for bed scraping"

    
[gcode_macro SCRAPE_BED]
gcode:
    {% set macro_vars = printer["gcode_macro _macro_variables"] %}
    {% set cool_temp = params.BED_COOL_THRESHOLD|default(macro_vars.scrape_max_temp_threshold_default)|float %}
    {% set zmax = printer.toolhead.axis_maximum.z|int %}
    {% set zmin = printer.toolhead.axis_minimum.z|int %}

    {% if (not macro_vars.state_ready_for_scrape) or printer.toolhead.position.y > 50 %}
      _READY_FOR_SCRAPE
    {% endif %}
    SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=0
    RESPOND MSG="Moving to vertical cooling position"
    SET_GCODE_VARIABLE MACRO=_macro_variables VARIABLE=state_ready_bed VALUE=False
    _DISABLE_Z_FRONT
    G90
    {% if (macro_vars.timelapse_on_scrape_enabled) %}
      {% for i in range(zmax, macro_vars.scrape_cool_pos -1, -1) %}
        G1 Z{i} F{macro_vars.speed_z * macro_vars.scrape_speed_rotate_pctg/100} #go to scrape wait position
          {% if (i%5 == 0) %}
            TIMELAPSE_TAKE_FRAME
            G4 P5000
          {% endif %}
      {% endfor %}
    {% else %}
      G1 Z{macro_vars.scrape_cool_pos} F{macro_vars.speed_z * macro_vars.scrape_speed_rotate_pctg/100} #go to scrape wait position
      SET_FAN_SPEED FAN=bed_cooling SPEED=1.0
    {% endif %}

    RESPOND MSG="Waiting for bed to cool to {cool_temp} C"
    TEMPERATURE_WAIT SENSOR=heater_bed MAXIMUM={cool_temp}
    # RESPOND MSG="Idle for 10min"   
    # G4 P600000 # Dwell time (msec)
    SET_FAN_SPEED FAN=bed_cooling SPEED=0
    G91
    RESPOND MSG="Scraping the bed"
    #variable_timelapse_on_scrape_enabled
    {% if (macro_vars.timelapse_on_scrape_enabled) %}
      {% for i in range(1, printer.toolhead.position.z - (zmin+1) ) %}
        G1 Z-1 F{macro_vars.speed_z * macro_vars.scrape_speed_z} # scrape the bed
        {% if (i%5 == 0) %}
          TIMELAPSE_TAKE_FRAME
          G4 P5000
        {% endif %}
      {% endfor %}
    {% else %}
      G90
      G1 Z{zmin+1} F{macro_vars.scrape_speed_z} # scrape the bed
    {% endif %}
    # G90
    # G1 Z{macro_vars.scrape_pos_corner} F{macro_vars.speed_z} # position to slow down on the bed's way back down 
    # G91
    # G1 Z{macro_vars.scrape_corner_distance} F{macro_vars.speed_z * macro_vars.scrape_speed_corner_pctg/100}
    # G90
    G28 Z 
    SET_FAN_SPEED FAN=bed_cooling SPEED=0
    RESPOND MSG="Bed cleared and ready for new print"
    #RESPOND MSG={printer.toolhead.homed_axes}


[gcode_macro CUT_FILAMENT]
gcode:
    {% set macro_vars = printer["gcode_macro _macro_variables"] %}
    
    # Ensure axes are homed
    {% if printer.toolhead.homed_axes != "xyz" %}
      G28
    {% endif %}
    
    # Make sure toolhead doesn't ram lever
    G90
    {% if printer.toolhead.position.y < macro_vars.cut_pos_y %}
      G1 Y{macro_vars.cut_pos_y} F{macro_vars.speed_xy}
    {% endif %}

    # position toolhead
    G1 X{macro_vars.cut_pos_x} Y{macro_vars.cut_pos_y} F{macro_vars.speed_xy}

    # insert lever
    G91
    G1 Y-{macro_vars.cut_attach_y_dist} F{macro_vars.speed_xy/2}

    # cut filament
    M204 S{macro_vars.slow_acc}
    G1 X-{macro_vars.cut_dx} Y-{macro_vars.cut_dy} F{macro_vars.speed_xy/2}
    G1 X{macro_vars.cut_dx} Y{macro_vars.cut_dy} F{macro_vars.speed_xy/2}
    M204 S{macro_vars.fast_acc}
    
    # remove lever
    G1 Y{macro_vars.cut_attach_y_dist} F{macro_vars.speed_xy}
    G90

    {% if printer.extruder.temperature > printer.configfile.settings.extruder.min_temp %}
      G90
      G1 X{macro_vars.purge_pos_x} F{macro_vars.speed_xy}
      G1 Y{macro_vars.purge_pos_y} F{macro_vars.speed_xy}
    {% endif %}

[gcode_macro UNLOAD_FILAMENT]
gcode:
    CUT_FILAMENT
    M83
    G92 E0
    FORCE_MOVE STEPPER=extruder DISTANCE=-50 VELOCITY=2
    G92 E0


[gcode_macro LOAD_FILAMENT_MENU]
gcode:
    {% set macro_vars = printer["gcode_macro _macro_variables"] %}
    {% set extruder_temp = params.EXTRUDER_TEMP|default(macro_vars.default_temp_extruder)|float %}
    CUT_FILAMENT
    G1 X0 F{macro_vars.speed_xy}
    SET_HEATER_TEMPERATURE HEATER=extruder TARGET={extruder_temp} # Heat the extruder to first layer temp 
    TEMPERATURE_WAIT SENSOR=extruder MINIMUM={extruder_temp} # Wait for extruder to be at first layer temp
    M83
    G92 E0
    G1 E-50 F360
    G92 E0
    RESPOND TYPE=command MSG="action:prompt_begin Filament Menu"
    RESPOND TYPE=command MSG="action:prompt_text Ready to load filament?"
    RESPOND TYPE=command MSG="action:prompt_footer_button continue|END_FILAMENT_MENU COOL=False"
    RESPOND TYPE=command MSG="action:prompt_footer_button cool|END_FILAMENT_MENU COOL=True"
    RESPOND TYPE=command MSG="action:prompt_footer_button CANCEL|CANCEL_PRINT|error"
    RESPOND TYPE=command MSG="action:prompt_show"
    PAUSE
  
[gcode_macro END_FILAMENT_MENU]
gcode:
    {% set do_cooling = params.COOL|lower %}
    RESPOND TYPE=command MSG="action:prompt_end"
    PURGE_WIPE_PLUG EXTRUDER_TEMP={extruder_temp}
    {% if do_cooling == "true" %}
      SET_HEATER_TEMPERATURE HEATER=extruder # cool
      M106 S255
      TEMPERATURE_WAIT SENSOR=extruder MAXIMUM=49} # Wait for extruder to be at first layer temp
    {% else %}
      G4 S10000
    {% endif %}
    G90
    G1 X0
    G91
    G1 Y20


[gcode_macro WIPE_PLUG]
gcode:
    {% set macro_vars = printer["gcode_macro _macro_variables"] %}

    {% if printer.toolhead.homed_axes != "xyz" %}
      G28
    {% endif %}

    G90
    G1 X0 F{macro_vars.speed_xy}
    G1 Y{macro_vars.plug_pos_y} F{macro_vars.wipe_speed}
    WIPE_NOZZLE
    G1 X{macro_vars.plug_pos_x} F{macro_vars.wipe_speed}

    
[gcode_macro PURGE_WIPE_PLUG]
gcode:
    {% set macro_vars = printer["gcode_macro _macro_variables"] %}
    {% set extruder_temp = params.EXTRUDER_TEMP|default(macro_vars.default_temp_extruder)|float %}

    {% if printer.toolhead.homed_axes != "xyz" %}
      G28
    {% endif %}

    G90
    # Make sure toolhead approaches purge pos from rear
    {% if printer.toolhead.position.x != 0 or printer.toolhead.position.y != macro_vars.plug_pos_y %}
      G1 X0 F{macro_vars.speed_xy} Y{macro_vars.plug_pos_y + 20} F{macro_vars.speed_xy}
    {% endif %}
    
    # Move to filament purge pos
    G1 Y{macro_vars.plug_pos_y} F{macro_vars.speed_xy}

    # Purge filament
    SET_HEATER_TEMPERATURE HEATER=extruder TARGET={extruder_temp} # Heat the extruder to first layer temp 
    TEMPERATURE_WAIT SENSOR=extruder MINIMUM={extruder_temp} # Wait for extruder to be at first layer temp
    M83
    G1 E{macro_vars.purge_dist} F{macro_vars.purge_speed}
    # Retract
    G1 E-2 F7200

    # Wipe nozzle
    WIPE_NOZZLE

    # Plug nozzle
    G90
    G1 X{macro_vars.plug_pos_x} F{macro_vars.wipe_speed}

[gcode_macro WIPE_NOZZLE]
gcode:
    {% set macro_vars = printer["gcode_macro _macro_variables"] %}
    G90
    {% if printer.toolhead.position.x != 0 or printer.toolhead.position.y != macro_vars.plug_pos_y %}
      G1 X0 Y{macro_vars.plug_pos_y} F{macro_vars.speed_xy}
    {% endif %}
    
    G1 X{macro_vars.plug_pos_x - macro_vars.wipe_plug_dx + macro_vars.wipe_dist/2} F{macro_vars.wipe_speed}
    G91
    G1 X-{macro_vars.wipe_dist} F{macro_vars.wipe_speed}
    G1 X{macro_vars.wipe_dist} F{macro_vars.wipe_speed}
    G1 X-{macro_vars.wipe_dist} F{macro_vars.wipe_speed}
    G1 X{macro_vars.wipe_dist} F{macro_vars.wipe_speed}
    G1 X-{macro_vars.wipe_dist} F{macro_vars.wipe_speed}
    G1 X{macro_vars.wipe_dist} F{macro_vars.wipe_speed}
    G1 X-{macro_vars.wipe_dist} F{macro_vars.wipe_speed}
    G92 E0

    
[gcode_macro Z_TILT_ADJUST]
rename_existing: _Z_TILT_ADJUST
gcode:
    {% set macro_vars = printer["gcode_macro _macro_variables"] %}
    {% set extruder_temp = params.EXTRUDER_TEMP|default(macro_vars.default_temp_extruder)|float %}
    RESPOND MSG="Performing a Z tilt adjustment (bed leveling)"
    {% if (not macro_vars.state_ready_bed) %}
      READY_BED
    {% endif %}
    RESPOND MSG="x: {printer.toolhead.position.x}"
    RESPOND MSG="y: {printer.toolhead.position.y}"
    RESPOND MSG="temp: {printer.extruder.temperature}"
    {% if printer.toolhead.position.x != macro_vars.plug_pos_x or printer.toolhead.position.y != macro_vars.plug_pos_y %}
      PURGE_WIPE_PLUG EXTRUDER_TEMP={extruder_temp}
      SET_HEATER_TEMPERATURE HEATER=extruder # cool
      M106 S255
      TEMPERATURE_WAIT SENSOR=extruder MAXIMUM=59 # Wait for extruder to be at first layer temp
      M106 S0
      G90
      G1 X0
      G91
      G1 Y20
    {% elif printer.extruder.temperature > 59 %}
      SET_HEATER_TEMPERATURE HEATER=extruder # cool
      M106 S255
      TEMPERATURE_WAIT SENSOR=extruder MAXIMUM=59 # Wait for extruder to be at first layer temp
      M106 S0
    {% endif %}    # M204 S{macro_vars.slow_acc}
    _Z_TILT_ADJUST
    # M204 S{macro_vars.fast_acc}
    # G90
    # G1 X{macro_vars.ready_pos_x} Y{macro_vars.ready_pos_y} F{macro_vars.speed_xy}
    SET_GCODE_VARIABLE MACRO=_macro_variables VARIABLE=state_bed_is_level VALUE=True
    RESPOND MSG="Bed is experiencing TRUE LEVEL"

[gcode_macro PROBE_BED_MESH]
gcode:
    {% set save_to_manual_profile = params.MANUAL|default(True)|lower %}
    {% set macro_vars = printer["gcode_macro _macro_variables"] %}

    {% if (not macro_vars.state_bed_is_level) %}
        Z_TILT_ADJUST
    {% endif %}
    # RESPOND MSG="Z_Tilt_Adj dock=false, line 370"
    M204 S{macro_vars.slow_acc}
    {% if save_to_manual_profile == "true" %}
        RESPOND MSG="Probing full bed and saving to manual mesh"
        BED_MESH_CALIBRATE
    {% else %}
        RESPOND MSG="Adaptive Probing"
        BED_MESH_CALIBRATE ADAPTIVE=1 
    {% endif %}    
    
    # DETACH_PROBE
    {% if save_to_manual_profile == "true" %}
        BED_MESH_PROFILE SAVE=manual_mesh
        READY_TOOLHEAD
        SET_GCODE_VARIABLE MACRO=_macro_variables VARIABLE=state_homing_to_bottom VALUE=True
        G28 Z
        SAVE_CONFIG
    {% else %}
        BED_MESH_PROFILE SAVE=last_print
    {% endif %}
    M204 S{macro_vars.fast_acc}

[homing_override]
gcode:
    {% set axes = params.keys()|list %}
    {% set axes = axes[1:]|sort|reverse|join|lower %}
    {% set macro_vars = printer["gcode_macro _macro_variables"] %}
    {% set z_got_homed = False %}
    RESPOND MSG="Homing"
    
    G91
    {% if axes == '' %}
      #RESPOND MSG="no params"
      ENABLE_Z_ALL
      G28 Z
      {% set z_got_homed = True %}
      G28 Y
      G28 X
    {% elif 'z' not in printer.toolhead.homed_axes %}
      ENABLE_Z_ALL
      G28 Z 
      {% set z_got_homed = True %}
      {% if 'y' in axes %}
        G28 Y
      {% endif %}
      {% if 'x' in axes %}
        {% if 'y' not in printer.toolhead.homed_axes %}
          G28 Y
        {% elif printer.toolhead.position.y < 40 %}
          G1 Y40
        {% endif %}
        G28 X
      {% endif %}
    {% else %}
      {% if 'z' in axes %}
        G28 Z 
        {% set z_got_homed = True %}
      {% endif %}        
      {% if 'y' in axes %}
        G28 Y
      {% endif %}
      {% if 'x' in axes %}
        {% if 'y' not in printer.toolhead.homed_axes %}
          G28 Y
        {% elif printer.toolhead.position.y < 40 %}
          G1 Y40
        {% endif %}
        G28 X
      {% endif %}
    {% endif %}
    RESPOND MSG="Homed"
    {% if z_got_homed %}
      {% if (not macro_vars.state_homing_to_bottom) %}
        READY_BED
      {% else %}
        SET_GCODE_VARIABLE MACRO=_macro_variables VARIABLE=state_ready_bed VALUE=False
      {% endif %}
    {% endif %}

[gcode_macro SET_FILAMENT_SPECIFIC_Z_HEIGHT]
gcode:  
  {% set macro_vars = printer["gcode_macro _macro_variables"] %}
  SET_GCODE_OFFSET Z={macro_vars.filament_specific_offset}



# ██████╗ ██████╗ ██╗███╗   ██╗████████╗    ███████╗████████╗ █████╗ ██████╗ ████████╗ ██╗███████╗███╗   ██╗██████╗ 
# ██╔══██╗██╔══██╗██║████╗  ██║╚══██╔══╝    ██╔════╝╚══██╔══╝██╔══██╗██╔══██╗╚══██╔══╝██╔╝██╔════╝████╗  ██║██╔══██╗
# ██████╔╝██████╔╝██║██╔██╗ ██║   ██║       ███████╗   ██║   ███████║██████╔╝   ██║  ██╔╝ █████╗  ██╔██╗ ██║██║  ██║
# ██╔═══╝ ██╔══██╗██║██║╚██╗██║   ██║       ╚════██║   ██║   ██╔══██║██╔══██╗   ██║ ██╔╝  ██╔══╝  ██║╚██╗██║██║  ██║
# ██║     ██║  ██║██║██║ ╚████║   ██║       ███████║   ██║   ██║  ██║██║  ██║   ██║██╔╝   ███████╗██║ ╚████║██████╔╝
# ╚═╝     ╚═╝  ╚═╝╚═╝╚═╝  ╚═══╝   ╚═╝       ╚══════╝   ╚═╝   ╚═╝  ╚═╝╚═╝  ╚═╝   ╚═╝╚═╝    ╚══════╝╚═╝  ╚═══╝╚═════╝ 
                                                                                                                 
[gcode_macro PRINT_START]
description: This macro runs at the beginning of each print. Example: PRINT_START BED_TEMP=[first_layer_bed_temperature] EXTRUDER_TEMP=[first_layer_temperature]
gcode:
  {% set macro_vars = printer["gcode_macro _macro_variables"] %}
  {% set bed_temp = params.BED_TEMP|default(macro_vars.default_temp_bed)|float %}
  {% set extruder_temp = params.EXTRUDER_TEMP|default(macro_vars.default_temp_extruder)|float %}
  {% set first_layer_height = params.FIRST_LAYER_HEIGHT|default(macro_vars.default_first_layer_height)|float %}

  SET_GCODE_VARIABLE MACRO=_macro_variables VARIABLE=print_temp VALUE={extruder_temp}
  RESPOND MSG="Starting Print"
  G90 # Use absolute coordinates
  M83 # Extruder relative mode
  
  RESPOND MSG="Bed Target Temperature: {bed_temp} C"
  RESPOND MSG="Extruder Target Temperature: {extruder_temp} C"
  SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={bed_temp} # Begin warming bed, set to first layer temp

  {% if (not macro_vars.state_ready_bed) %}
    READY_BED
  {% endif %}

  G90
  G1 Z50 # Move bed closer to nozzle

  # Make sure X and Y are homed
  {% if 'y' not in printer.toolhead.homed_axes %}
    G28 Y
  {% endif %}
  {% if 'x' not in printer.toolhead.homed_axes %}
    G28 X    
  {% endif %}

  TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={bed_temp} # Heat bed, set to first layer temp, wait
  #G4 60000 # Dwell time (msec)
  
  Z_TILT_ADJUST EXTRUDER_TEMP={extruder_temp}
  # MMU_START_LOAD_INITIAL_TOOL #BAYL
  BED_MESH_PROFILE LOAD=manual_mesh
  
  # PROBE_BED_MESH MANUAL=False
  G90
  G1 X{macro_vars.prime_pos_x} Y{macro_vars.prime_pos_y}  F{macro_vars.speed_xy} #NOZZLE START POSITION, PLUGGED
  G1 Z{macro_vars.prime_pos_z} F{macro_vars.speed_z}
  SET_HEATER_TEMPERATURE HEATER=extruder TARGET={extruder_temp} # Heat the extruder to first layer temp 
  TEMPERATURE_WAIT SENSOR=extruder MINIMUM={extruder_temp} # Wait for extruder to be at first layer temp

[gcode_macro PRINT_END]
description: This macro runs at the end of each print. Example: PRINT_END [CLEAR_BED=True KEEP_WARM=False]
gcode:
  {% set macro_vars = printer["gcode_macro _macro_variables"] %}
  {% set do_bed_scrape = params.CLEAR_BED|default(True)|lower %}
  {% set cool_temp = params.BED_COOL_THRESHOLD|float %}
  {% set zmax = printer.toolhead.axis_maximum.z %}

  G92 E0
  G1 E-2 F7200
  # RESPOND MSG= do_bed_scrape = {do_bed_scrape}
  TURN_OFF_HEATERS
  WIPE_PLUG
 
  {% if do_bed_scrape =="true" %}
    SCRAPE_BED BED_COOL_THRESHOLD={cool_temp}
  {% endif %}
  

################# ################# Prime ################# ################# 
[gcode_macro _prime_line_01]
gcode:
  {% set macro_vars = printer["gcode_macro _macro_variables"] %}
  ;Relative coordinates
  G91
  ;Extruder relative coordinates
  M83 
  ;Reset extruder position
  G92 E0
  ;Prime shape
  G1 F800
  G1 Z{macro_vars.prime_layer_z_height}
  G1 Y100 E25
  G1 Z{macro_vars.prime_layer_z_height}
  G1 Y-100 E25
  G1 Z{macro_vars.prime_layer_z_height}
  G1 Y100 E25
  ;end prime shape
  
  ; Reset extruder position
  G92 E0


# ███╗   ███╗███╗   ███╗██╗   ██╗     ██████╗██╗   ██╗███████╗████████╗ ██████╗ ███╗   ███╗    ███╗   ███╗ █████╗  ██████╗██████╗  ██████╗ ███████╗
# ████╗ ████║████╗ ████║██║   ██║    ██╔════╝██║   ██║██╔════╝╚══██╔══╝██╔═══██╗████╗ ████║    ████╗ ████║██╔══██╗██╔════╝██╔══██╗██╔═══██╗██╔════╝
# ██╔████╔██║██╔████╔██║██║   ██║    ██║     ██║   ██║███████╗   ██║   ██║   ██║██╔████╔██║    ██╔████╔██║███████║██║     ██████╔╝██║   ██║███████╗
# ██║╚██╔╝██║██║╚██╔╝██║██║   ██║    ██║     ██║   ██║╚════██║   ██║   ██║   ██║██║╚██╔╝██║    ██║╚██╔╝██║██╔══██║██║     ██╔══██╗██║   ██║╚════██║
# ██║ ╚═╝ ██║██║ ╚═╝ ██║╚██████╔╝    ╚██████╗╚██████╔╝███████║   ██║   ╚██████╔╝██║ ╚═╝ ██║    ██║ ╚═╝ ██║██║  ██║╚██████╗██║  ██║╚██████╔╝███████║
# ╚═╝     ╚═╝╚═╝     ╚═╝ ╚═════╝      ╚═════╝ ╚═════╝ ╚══════╝   ╚═╝    ╚═════╝ ╚═╝     ╚═╝    ╚═╝     ╚═╝╚═╝  ╚═╝ ╚═════╝╚═╝  ╚═╝ ╚═════╝ ╚══════╝

[gcode_macro VERTIGO_MMU_PRE_UNLOAD]
gcode: